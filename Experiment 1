Verilog_HDL_Project_Portfolio/
│
├── Experiment_1/
│   ├── README.md
│   ├── FullAdder/
│   │   ├── FullAdder.v
│   │   └── tb_FullAdder.v
│   ├── FullSubtractor/
│   │   ├── FullSubtractor.v
│   │   └── tb_FullSubtractor.v
│   ├── FourBitAdder/
│   │   ├── FourBitAdder.v
│   │   └── tb_FourBitAdder.v
│   ├── Multiplexer/
│   │   ├── MUX.v
│   │   └── tb_MUX.v
│   └── Demultiplexer/
│       ├── DEMUX_1x4.v
│       └── tb_DEMUX_1x4.v
└── LICENSE

# Experiment 1 - Combinational Logic Circuits

This experiment covers the design and testing of basic combinational logic circuits, including Full Adder, Full Subtractor, 4-bit Adder, Multiplexer, and Demultiplexer. Each module includes both the Verilog HDL code and an exhaustive testbench to validate functionality. This project is designed for the EDA Playground environment.

## 1. Full Adder
The Full Adder module performs a 1-bit binary addition of three inputs: `A`, `B`, and `Cin`. It produces a Sum (`S`) and a Carry Out (`Cout`).

- **Files**:
  - `FullAdder/FullAdder.v`: Verilog code for the Full Adder
  - `FullAdder/tb_FullAdder.v`: Testbench for the Full Adder

## 2. Full Subtractor
The Full Subtractor module performs a 1-bit binary subtraction of three inputs: `a`, `b`, and `bin`. It produces a Difference (`diff`) and a Borrow (`borrow`).

- **Files**:
  - `FullSubtractor/FullSubtractor.v`: Verilog code for the Full Subtractor
  - `FullSubtractor/tb_FullSubtractor.v`: Testbench for the Full Subtractor

## 3. Four-Bit Adder
The 4-bit Adder module performs a 4-bit binary addition using four Full Adders in series.

- **Files**:
  - `FourBitAdder/FourBitAdder.v`: Verilog code for the 4-bit Adder
  - `FourBitAdder/tb_FourBitAdder.v`: Testbench for the 4-bit Adder

## 4. Multiplexer (4-to-1)
The 4-to-1 Multiplexer selects one of four 4-bit inputs based on a 2-bit selector signal.

- **Files**:
  - `Multiplexer/MUX.v`: Verilog code for the Multiplexer
  - `Multiplexer/tb_MUX.v`: Testbench for the Multiplexer

## 5. Demultiplexer (1-to-4)
The 1-to-4 Demultiplexer directs a single input to one of four outputs based on two select lines.

- **Files**:
  - `Demultiplexer/DEMUX_1x4.v`: Verilog code for the Demultiplexer
  - `Demultiplexer/tb_DEMUX_1x4.v`: Testbench for the Demultiplexer

Full Verilog Code for Experiment 1
FullAdder/FullAdder.v
module FullAdder (
    input A, B, Cin,
    output S, Cout
);
    assign S = A ^ B ^ Cin;
    assign Cout = (A & B) | (B & Cin) | (Cin & A);
endmodule

FullAdder/tb_FullAdder.v
module tb_FullAdder;
    reg A, B, Cin;
    wire S, Cout;

    // Instantiate the Full Adder module
    FullAdder UUT (.A(A), .B(B), .Cin(Cin), .S(S), .Cout(Cout));

    initial begin
        $dumpfile("fulladder.vcd");
        $dumpvars(1, tb_FullAdder);

        $monitor("Time: %3d, A = %b, B = %b, Cin = %b, Sum = %b, Cout = %b", 
                  $time, A, B, Cin, S, Cout);

        // Apply test vectors
        A = 0; B = 0; Cin = 0; #20;
        A = 0; B = 1; Cin = 0; #20;
        A = 1; B = 0; Cin = 0; #20;
        A = 1; B = 1; Cin = 0; #20;
        A = 0; B = 0; Cin = 1; #20;
        A = 1; B = 0; Cin = 1; #20;
        A = 0; B = 1; Cin = 1; #20;
        A = 1; B = 1; Cin = 1; #20;

        $finish;
    end
endmodule

FullSubtractor/FullSubtractor.v
module FullSubtractor (
    input a, b, bin,
    output diff, borrow
);
    assign diff = a ^ b ^ bin;
    assign borrow = (~a & b) | (~a & bin) | (b & bin);
endmodule

FullSubtractor/tb_FullSubtractor.v
module tb_FullSubtractor;
    reg a, b, bin;
    wire diff, borrow;

    FullSubtractor UUT (.a(a), .b(b), .bin(bin), .diff(diff), .borrow(borrow));

    initial begin
        $dumpfile("fullsubtractor.vcd");
        $dumpvars(1, tb_FullSubtractor);

        $monitor("a=%b, b=%b, bin=%b, difference=%b, borrow=%b", a, b, bin, diff, borrow);

        // Apply test vectors
        a = 0; b = 0; bin = 0; #20;
        a = 0; b = 1; bin = 0; #20;
        a = 1; b = 0; bin = 0; #20;
        a = 1; b = 1; bin = 0; #20;
        a = 0; b = 0; bin = 1; #20;
        a = 1; b = 0; bin = 1; #20;
        a = 0; b = 1; bin = 1; #20;
        a = 1; b = 1; bin = 1; #20;

        $finish;
    end
endmodule


FourBitAdder/FourBitAdder.v
module FourBitAdder (
    input [3:0] A, B,
    input Cin,
    output [3:0] S,
    output Cout
);
    wire [2:0] C;

    FullAdder FA0 (Cin, A[0], B[0], S[0], C[0]);
    FullAdder FA1 (C[0], A[1], B[1], S[1], C[1]);
    FullAdder FA2 (C[1], A[2], B[2], S[2], C[2]);
    FullAdder FA3 (C[2], A[3], B[3], S[3], Cout);
endmodule

FourBitAdder/tb_FourBitAdder.v
module tb_FourBitAdder;
    reg [3:0] A, B;
    reg Cin;
    wire [3:0] S;
    wire Cout;

    FourBitAdder UUT (.A(A), .B(B), .Cin(Cin), .S(S), .Cout(Cout));

    initial begin
        $dumpfile("fourbitadder.vcd");
        $dumpvars(1, tb_FourBitAdder);

        $monitor("Time=%3d, A=%4b, B=%4b, Cin=%b, S=%4b, Cout=%b", $time, A, B, Cin, S, Cout);

        A = 4'b0000; B = 4'b0000; Cin = 0; #20;
        A = 4'b0001; B = 4'b0001; Cin = 0; #20;
        A = 4'b0010; B = 4'b0010; Cin = 0; #20;
        A = 4'b1101; B = 4'b1001; Cin = 0; #20;

        $finish;
    end
endmodule

Multiplexer/MUX.v
module MUX (
    input [3:0] A, B, C, D,
    input [1:0] sel,
    input en,
    output reg [3:0] out
);
    always @(*) begin
        if (en) begin
            case (sel)
                2'b00: out = A;
                2'b01: out = B;
                2'b10: out = C;
                2'b11: out = D;
                default: out = 4'bz;
            endcase
        end else begin
            out = 4'bz;
        end
    end
endmodule

Multiplexer/tb_MUX.v
module tb_MUX;
    reg [3:0] A, B, C, D;
    reg [1:0] sel;
    reg en;
    wire [3:0] out;

    MUX UUT (.A(A), .B(B), .C(C), .D(D), .sel(sel), .en(en), .out(out));

    initial begin
        $dumpfile("mux.vcd");
        $dumpvars(1, tb_MUX);

        // Set test values for A, B, C, and D
        A = 4'b0001;
        B = 4'b0010;
        C = 4'b0100;
        D = 4'b1000;

        // Enable Multiplexer and cycle through select lines
        en = 1;
        sel = 2'b00; #20;
        sel = 2'b01; #20;
        sel = 2'b10; #20;
        sel = 2'b11; #20;

        // Disable Multiplexer
        en = 0; #20;

        $finish;
    end
endmodule

Demultiplexer/DEMUX_1x4.v
module DEMUX_1x4 (
    input I,
    input s0, s1,
    output Y0, Y1, Y2, Y3
);
    assign Y0 = I & (~s0) & (~s1);
    assign Y1 = I & (~s0) & s1;
    assign Y2 = I & s0 & (~s1);
    assign Y3 = I & s0 & s1;
endmodule

Demultiplexer/tb_DEMUX_1x4.v
module tb_DEMUX_1x4;
    reg I, s0, s1;
    wire Y0, Y1, Y2, Y3;

    DEMUX_1x4 UUT (.I(I), .s0(s0), .s1(s1), .Y0(Y0), .Y1(Y1), .Y2(Y2), .Y3(Y3));

    initial begin
        $dumpfile("demux.vcd");
        $dumpvars(1, tb_DEMUX_1x4);

        // Apply test vectors
        I = 1; s0 = 0; s1 = 0; #10;
        I = 1; s0 = 0; s1 = 1; #10;
        I = 1; s0 = 1; s1 = 0; #10;
        I = 1; s0 = 1; s1 = 1; #10;

        $finish;
    end
endmodule
